#!/usr/bin/env python
# -*- coding:utf-8 -*-

from pyspider.libs.base_handler import *
import re
from pyspider.database.mysql.mysqldb import SQL
import time
import random
import os

DIR_PATH='/root/xuguanjun/getimg/taobao/'

class Handler(BaseHandler):
    crawl_config = {
        'headers': {
           'Connection':'keep-alive',
            'Accept-Encoding':'gzip, deflate, br',
            'Accept-Language':'zh-CN,zh;q=0.8',
            'content-type':'application/x-www-form-urlencoded',
            'Referer':'https://uniqlo.tmall.com/',
            'User-Agent':'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36'
        }
    }
    
    def __init__(self):
        self.base_url = {
            "jacket" : "https://adidas.tmall.com/category-246975570.htm?spm=a1z10.5-b-s.w4011-14694769140.86.1f31d8dbi3BMJP&scene=taobao_shop&catId=246975570&search=y&orderType=hotsell_desc&viewType=list" , 
            "jingshen-trousers": "https://adidas.tmall.com/category-1206828235.htm?spm=a1z10.5-b-s.w4011-14694769140.80.1881761cc8JWb4&scene=taobao_shop&catId=1206828235&search=y&orderType=hotsell_desc&viewType=list",
            "trousers" : "https://adidas.tmall.com/category-246975572.htm?spm=a1z10.5-b-s.w4011-14694769140.74.6ded0989Nu2uEd&parentCatId=246969712&parentCatName=%C4%D0%D7%D3&catName=%C4%D0%D7%D3%A3%BA%CF%C2%D7%B0&catId=246975572&viewType=list&search=y&orderType=hotsell_desc" ,
            "feather" : "https://adidas.tmall.com/category-246975576.htm?spm=a1z10.5-b-s.w4011-14694769140.84.33e75ad8kyRoxR&scene=taobao_shop&catId=246975576&search=y&orderType=hotsell_desc&viewType=list" , 
            "long-T-shirt" : "https://adidas.tmall.com/category-246975568.htm?spm=a1z10.5-b-s.w4011-14694769140.83.232d7811hf5VUL&scene=taobao_shop&catId=246975568&search=y&orderType=hotsell_desc&viewType=list" , 
            "T-shirt" : "https://adidas.tmall.com/category-246969713.htm?spm=a1z10.5-b-s.w4011-14694769140.79.270cf9d8Fl6igC&scene=taobao_shop&catId=246969713&search=y&orderType=hotsell_desc&viewType=list" ,
            "NewGoods" : "https://adidas.tmall.com/category-1360163567.htm?pv=122216608%3A20532%3B20509%3A28316%2C28315%2C28314%2C28317%2C28313%2C6145171%2C28318%2C115781%2C28319&search=y&catId=1360163567&csy=1&viewType=list"
            
        
        }
        self.gettime = time.strftime("%Y-%m-%d", time.localtime()) 
        self.brand = ""
        self.num = 0
        self.pageCount = 100    
        self.tb = "adidas"
        self.tbCount = "adidasCount"
        self.deal=Deal()





    @every(minutes= 24 * 60 , seconds=0)
    def on_start(self):        
        for key in self.base_url: 
            i = random.randint(1,30)
            url = self.base_url[key]
            self.crawl(url, callback=self.index_page , exetime=time.time()+ i*7 , retries=10, validate_cert=False , fetch_type="js" , js_script='''
               function() {
                 setTimeout("window.scrollTo(0,document.documentElement.scrollHeight)", 16000);
               }
               ''' ,timeout=360,connect_timeout=180, save={'brand':key})
            
            
    def rematch(self , str):
        x = re.compile(u'男')
        y = re.compile(u'鞋')
        a = x.findall(str)
        b = y.findall(str)
        if len(a) == 0:
            return 0
        if len(b) > 0:
            return 0
        
        return 1


    @config(age= 60) 
    def index_page(self, response):
        if response.save['brand'] == 'NewGoods':
            cnum = 50
        else:
            cnum = 30
            
        count = 0
        
        self.num = int(response.doc('.ui-page-s-len').text().split('/')[1])

        if self.num >= 1:
            if self.num == 1:
                self.detail_countOne(response)
            else:
                suffix = '&pageNo=' + str(self.num)
                url = self.base_url[response.save['brand']] + suffix
                i = random.randint(1,180)
                self.crawl(url, callback=self.detail_count, exetime=time.time()+ i  , validate_cert=False , fetch_type="js" , js_script='''
                   function() {
                     setTimeout("window.scrollTo(0,document.documentElement.scrollHeight)", 9000);
                   }
                   ''' , timeout=360,connect_timeout=180, save = {'brand' : response.save['brand'] , 'num' :self.num })        
            
        
        for each in response.doc('.title > a').items():
            if self.rematch(each.text()) == 0:
                continue
                
            if count >= cnum:
                break
            i = random.randint(1,300)
            self.crawl(each.attr.href, callback=self.detail_page, exetime=time.time()+ i  , validate_cert=False , fetch_type="js" , js_script='''
               function() {
                 setTimeout("window.scrollTo(0,document.documentElement.scrollHeight)", 9000);
               }
               ''' , timeout=360,connect_timeout=180, save = {'brand' : response.save['brand']})
            count += 1


    @config(age= 60) 
    def detail_countOne(self , response):
        c = 0
        for cc in response.doc('.title > a').items():
            if cc: 
                c += 1        

        total = c
        #print c

        
        brandCount = {
            "brand" : response.save['brand'],
            "gettime" :  self.gettime , 
            "count" : total ,
            "url" : self.base_url[response.save['brand']]
        }
        sql = SQL()
        sql.insert(self.tbCount,**brandCount)               
                  
            
            
    @config(age= 60)             
    def detail_count(self , response): 
        c = 0
        for cc in response.doc('.title > a').items():
            if cc: 
                c += 1
        
        total = self.pageCount * (int(response.save['num']) - 1)  + c
        
        brandCount = {
            "brand" : response.save['brand'],
            "gettime" :  self.gettime , 
            "count" : total ,
            "url" : self.base_url[response.save['brand']]
        }
        sql = SQL()
        sql.insert('adidasCount',**brandCount)             
            
    
    
    @config(age= 60)     
    def detail_page(self, response):
        name = response.doc('.tb-detail-hd > h1').text()
        msales = response.doc('.tm-ind-sellCount .tm-count').text()    
        mprice = response.doc('.tm-price').text()
        promotion_price = response.doc('.tm-promo-price > .tm-price').text()
        mactivity = response.doc('.tm-gold > dd').text()
        dir_path = DIR_PATH + response.url[0:49][-12:]
        if os.path.exists(dir_path):
            pass
        else:
            dir_path=self.deal.mkDIR(response.url[0:49][-12:])
            
            
            
        imgs=response.doc('.tb-thumb-content img').items()
        count = 0
        for img in imgs:
            url = img.attr.src
            if url:
                i = random.randint(1,120)
                suffix = '430x430q90.jpg'
                newurl = url[:-12] + suffix
                filename = str(count) + '.jpg'
                if os.path.exists(dir_path + '/' + filename):
                    pass
                else:
                    dir_path=self.deal.mkDIR(response.url[0:49][-12:])               
                    self.crawl(newurl, callback=self.save_img, exetime=time.time()+ i*3  , validate_cert=False , save={'save_path':dir_path,'file_name':filename})
                count += 1
        

        return { 
               "brand" : response.save['brand'] ,
               "url": response.url[0:49],
               "name" : name.encode('utf-8') ,
               "msales": msales ,
               "mprice": mprice ,
               "promotion_price" : promotion_price ,
               "mactivity": mactivity ,
               "gettime" : self.gettime
        }
    
    
    def save_img(self,response):
        content=response.content
        dir_path=response.save['save_path']
        file_name=response.save['file_name']
        file_path=dir_path+'/'+file_name
        self.deal.save_Img(content,file_path)    
    
    
    
    def on_result(self,result):
        if not result or not result['url'] or not result['name'] :
            return
        sql = SQL()
        sql.insert(self.tb,**result)  
        
        
        
        
        
        
        
        
class Deal:
    def __init__(self):
        self.dir_path=DIR_PATH
        if not self.dir_path.endswith('/'):
            self.dir_path=self.dir_path+'/'
        if not os.path.exists(self.dir_path):
            os.makedirs(self.dir_path)

    def mkDIR(self,name):
        name=name.strip()
        #dir_name=self.dir_path+'/'+name
        dir_name=self.dir_path+name
        exists=os.path.exists(dir_name)
        if not exists:
            os.makedirs(dir_name)
            return dir_name
        else:
            return dir_name

    def save_Img(self,content,file_name):
        file=open(file_name,'wb')
        file.write(content)
        file.close()




        
        
        